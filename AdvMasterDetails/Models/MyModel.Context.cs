//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdvMasterDetails.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventoryDBEntities3 : DbContext
    {
        public InventoryDBEntities3()
            : base("name=InventoryDBEntities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Option> Options { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<OrderMaster> OrderMasters { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Remark> Remarks { get; set; }
        public virtual DbSet<RemarksTable> RemarksTables { get; set; }
        public virtual DbSet<Status> Status { get; set; }
    
        public virtual ObjectResult<sp_ProductAvailibility_Result> sp_ProductAvailibility(string fromD, string toD, Nullable<int> prodId, string status, Nullable<int> qnt)
        {
            var fromDParameter = fromD != null ?
                new ObjectParameter("FromD", fromD) :
                new ObjectParameter("FromD", typeof(string));
    
            var toDParameter = toD != null ?
                new ObjectParameter("ToD", toD) :
                new ObjectParameter("ToD", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var qntParameter = qnt.HasValue ?
                new ObjectParameter("Qnt", qnt) :
                new ObjectParameter("Qnt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductAvailibility_Result>("sp_ProductAvailibility", fromDParameter, toDParameter, prodIdParameter, statusParameter, qntParameter);
        }
    
        public virtual ObjectResult<OrderDetail> ProductAvailibility(string fromD, string toD, Nullable<int> prodId, string status, Nullable<int> qnt)
        {
            var fromDParameter = fromD != null ?
                new ObjectParameter("FromD", fromD) :
                new ObjectParameter("FromD", typeof(string));
    
            var toDParameter = toD != null ?
                new ObjectParameter("ToD", toD) :
                new ObjectParameter("ToD", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var qntParameter = qnt.HasValue ?
                new ObjectParameter("Qnt", qnt) :
                new ObjectParameter("Qnt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderDetail>("ProductAvailibility", fromDParameter, toDParameter, prodIdParameter, statusParameter, qntParameter);
        }
    
        public virtual ObjectResult<OrderDetail> ProductAvailibility(string fromD, string toD, Nullable<int> prodId, string status, Nullable<int> qnt, MergeOption mergeOption)
        {
            var fromDParameter = fromD != null ?
                new ObjectParameter("FromD", fromD) :
                new ObjectParameter("FromD", typeof(string));
    
            var toDParameter = toD != null ?
                new ObjectParameter("ToD", toD) :
                new ObjectParameter("ToD", typeof(string));
    
            var prodIdParameter = prodId.HasValue ?
                new ObjectParameter("ProdId", prodId) :
                new ObjectParameter("ProdId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var qntParameter = qnt.HasValue ?
                new ObjectParameter("Qnt", qnt) :
                new ObjectParameter("Qnt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderDetail>("ProductAvailibility", mergeOption, fromDParameter, toDParameter, prodIdParameter, statusParameter, qntParameter);
        }
    }
}
